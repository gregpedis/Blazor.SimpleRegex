@using SimpleRegex.Parsing.Nodes
@using SimpleRegex.Parsing;

@if (_rootType == ExpressionType.STATIC)
{
	<span class="bullet">
		@Root.ToString()
	</span>
}
@if (_rootType == ExpressionType.UNARY_EXPR)
{
	<li>
		<span class="caret">@_exprName</span>
		<ul>
			<li>
				<Tree Root="((UnaryExprExpr)Root).Value" />
			</li>
		</ul>
	</li>
}

@if (_rootType == ExpressionType.LITERAL)
{
	<span class="tree-literal bullet">
		@_exprName "@(((Literal)Root).Value)"
	</span>
}

@if (_rootType == ExpressionType.IDENTIFIER)
{
	<span class="tree-identifier bullet">
		@_exprName "@(((Identifier)Root).Value)"
	</span>
}

@if (_rootType == ExpressionType.BINARY_LITERAL_LITERAL)
{
	<span class="caret">@_exprName</span>
	<ul>
		<li>
			<Tree Root="((BinaryExpr<Literal, Literal>)Root).Left" />
		</li>
		<li>
			<Tree Root="((BinaryExpr<Literal, Literal>)Root).Right" />
		</li>
	</ul>
}

@if (_rootType == ExpressionType.BINARY_EXPR_LITERAL)
{
	<span class="caret">@_exprName</span>
	<ul>
		<li>
			<Tree Root="((BinaryExpr<Expr, Literal>)Root).Left" />
		</li>
		<li>
			<Tree Root="((BinaryExpr<Expr, Literal>)Root).Right" />
		</li>
	</ul>
}

@if (_rootType == ExpressionType.BINARY_EXPR_INT)
{
	<span class="caret">@_exprName</span>
	<ul>
		<li>
			<Tree Root="((BinaryExpr<Expr, int>)Root).Left" />
		</li>
		<li>
			<span class="tree-number bullet">
				NUMBER [@(((BinaryExpr<Expr, int>)Root).Right)]
			</span>
		</li>
	</ul>
}

@if (_rootType == ExpressionType.ASSIGNMENT)
{
	<span class="tree-assignment caret">@_exprName</span>
	<ul>
		<li>
			<span class="tree-identifier bullet">
				IDENTIFIER "@(((Assignment)Root).Left)"
			</span>
		</li>
		<li>
			<Tree Root="((Assignment)Root).Right" />
		</li>
	</ul>
}

@if (_rootType == ExpressionType.EXECUTION)
{
	<span class="tree-execution caret">@_exprName</span>
	<ul>
		@foreach (var assignment in ((Execution)Root).Left)
		{
			<li>
				<Tree Root="@assignment" />
			</li>
		}
		<li>
			<span class="tree-expression caret">EXPRESSION</span>
			<ul>
				<li>
					<Tree Root="((Execution)Root).Right" />
				</li>
			</ul>
		</li>
	</ul>
}

@if (_rootType == ExpressionType.VARIADIC)
{
	<span class="caret">@_exprName</span>
	<ul>
		@foreach (var operand in ((VariadicExpr)Root).Operands)
		{
			<li>
				<Tree Root="@operand" />
			</li>
		}
	</ul>
}

@if (_rootType == ExpressionType.BETWEEN)
{
	<span class="caret">@_exprName</span>
	<ul>
		<li>
			<Tree Root="((Between)Root).Value" />
		</li>
		<li class="tree-number bullet">
			MIN [@(((Between)Root).Min)]
		</li>

		<li class="tree-number bullet">
			MAX [@(((Between)Root).Max)]
		</li>
	</ul>
}

@code {
	private ExpressionType _rootType;
	private string _exprName;

	[Parameter]
	public Expr Root { get; set; }

	protected override void OnParametersSet()
	{
		_exprName = Root.GetType().SimpleName();
		_rootType = Root switch
		{
			StaticExpr => ExpressionType.STATIC,

			Literal => ExpressionType.LITERAL,
			Identifier => ExpressionType.IDENTIFIER,
			UnaryExprExpr => ExpressionType.UNARY_EXPR,

			Assignment => ExpressionType.ASSIGNMENT,
			Execution => ExpressionType.EXECUTION,
			BinaryExpr<Literal, Literal> => ExpressionType.BINARY_LITERAL_LITERAL,
			BinaryExpr<Expr, Literal> => ExpressionType.BINARY_EXPR_LITERAL,
			BinaryExpr<Expr, int> => ExpressionType.BINARY_EXPR_INT,

			Between => ExpressionType.BETWEEN,
			VariadicExpr => ExpressionType.VARIADIC,
		};
	}

	private enum ExpressionType
	{
		STATIC,

		UNARY_EXPR,
		LITERAL,
		IDENTIFIER,

		BINARY_LITERAL_LITERAL,
		BINARY_EXPR_LITERAL,
		BINARY_EXPR_INT,
		ASSIGNMENT,
		EXECUTION,

		BETWEEN,
		VARIADIC,
	}
}
