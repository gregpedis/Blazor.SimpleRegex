@page "/"
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>SimpleRegex</PageTitle>

<h1>SimpleRegex</h1>
<hr />

<h4>Greetings, traveller!</h4>
<br />

@* INTRO *@
<p>
	This application aims to simplify the use of regular expressions, by implementing a thin wrapper over them.
	<br />
	<br />
	If you are interested in the implementation and the language syntax, click <a target="_blank" href="https://github.com/gregpedis/SimpleRegex/blob/master/README.md">here</a>.
</p>

@* INPUT *@
<div>
	<hr />
	<label>Insert your expression here.</label>
	<hr />
	<div id="editor" class="editor"></div>
</div>

@* OUTPUT *@
<div>
	<hr />
	<label>Regular expression generated.</label>
	<hr />
	<textarea class="output @outputClass" readonly>
		@targetText
	</textarea>
</div>

<button @onclick="CopyToClipboard">Copy</button>

<a class="button" target="_blank" href="https://regex101.com/">regex101</a>

<span class="@fadeClass">	Done!</span>

@code {

	private DotNetObjectReference<Index> _dotNetHelper;
	private string targetText = string.Empty;

	private string outputClass = "regex";
	private string fadeClass = "notify-init";
	private bool notifyCopy = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_dotNetHelper = DotNetObjectReference.Create(this);

			var initialValue = @"//This is a valid expression:
start + between(""hello there"", 42, 69)
or lazy(exactly(""12"", 3))
or many(any + quote or boundary)";

			// found in monaco-editor.js
			await JSRuntime.InvokeVoidAsync(
				"monacoInterop.initializeEditor",
				"editor",
				initialValue,
				_dotNetHelper);

			OnEditorValueChanged(initialValue);
		}
	}

	// This method will be called from JavaScript when the editor content changes.
	[JSInvokable]
	public void OnEditorValueChanged(string input)
	{
		var compilation = Compiler.Compile(input);
		Console.WriteLine(input);

		outputClass = compilation.Success ? "regex" : "failure";
		targetText = compilation.Success ? compilation.Regex : compilation.Exception.Message;

		StateHasChanged(); // Refresh the UI to show the updated value.
	}

	private async Task CopyToClipboard()
	{
		try
		{
			await JSRuntime.InvokeVoidAsync("copyToClipboard", targetText);
			await NotifyCopy();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error: {ex.Message}");
		}
	}

	private async Task NotifyCopy()
	{
		notifyCopy = true;
		fadeClass = "notify-show";
		StateHasChanged();

		await Task.Delay(750);

		fadeClass = "notify-hide";
		notifyCopy = false;
		StateHasChanged();
	}

	public void Dispose() =>
		_dotNetHelper?.Dispose();
}

