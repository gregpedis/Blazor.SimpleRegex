@page "/"
@using SimpleRegex.Blazor.Components
@using SimpleRegex.Parsing.Nodes
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>SimpleRegex</PageTitle>

<h1>SimpleRegex</h1>
<hr />

<h4>Greetings, traveller!</h4>
<br />

@* INTRO *@
<p>
	This application aims to simplify the use of regular expressions, by implementing a thin wrapper over them.
	<br />
	<br />
	If you are interested in the implementation and the language syntax, click <a target="_blank" href="https://github.com/gregpedis/SimpleRegex/blob/master/README.md">here</a>.
</p>


<div class="container">

	<div class="row">
		@* LEFT *@
		<div class="col-9 left-column">

			@* INPUT *@
			<div>
				<hr />
				<label>Insert your expression here.</label>
				<hr />
				<div id="editor" class="editor"></div>
			</div>

			@* OUTPUT *@
			<div>
				<hr />
				<label>Regular expression generated.</label>
				<hr />
				<textarea class="output @_outputClass" readonly>@OutputRegex</textarea>
			</div>

			@* BUTTONS *@
			<a class="button" target="_blank" href="https://regex101.com/">regex101</a>
			<CopyToClipboard Text="@OutputRegex"></CopyToClipboard>
		</div>

		@* RIGHT *@
		<div class="col-3">
			<hr />
			<label>Abstract Syntax Tree</label>
			<hr />
			<Tree Root=@OutputTree></Tree>
		</div>
	</div>
</div>

@code {

	private DotNetObjectReference<Index> _dotNetHelper;
	private string _outputClass = "regex";

	private string OutputRegex { get; set; }
	private Expr OutputTree { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_dotNetHelper = DotNetObjectReference.Create(this);

			var initialValue = @"//This is a valid expression:
alpha = anyof(
    range(""a"", ""z""),
    range(""A"",""Z""))

alphanumeric = anyOf(
        range(""a"",""z""),
        range(""A"", ""Z""),
        range(""0"", ""9""),
        ""_"",
        ""-"",
        "".""
        )

start +
many(alphanumeric) +
""@"" +
many(alphanumeric) +
""."" +
between(alpha, 2, 5) +
end";

			// found in monaco-editor.js
			await JSRuntime.InvokeVoidAsync(
				"monacoInterop.initializeEditor",
				"editor",
				initialValue,
				_dotNetHelper);

			OnEditorValueChanged(initialValue);
		}
	}

	// This method will be called from JavaScript when the editor content changes.
	[JSInvokable]
	public void OnEditorValueChanged(string input)
	{
		var compilation = Compiler.Compile(input);
		Console.WriteLine(input);

		if (compilation.Success)
		{
			OutputRegex = compilation.Regex;
			OutputTree = compilation.Tree;
			_outputClass = "regex";
		}
		else
		{
			OutputRegex = compilation.Exception.Message;
			_outputClass = "failure";
		}

		StateHasChanged();
	}

	public void Dispose() =>
		_dotNetHelper?.Dispose();
}
